# modules/vulnerability_scanning/scanner.py
from core.utils.logger import CyberLogger
from core.utils.report_generator import generate_report
from modules.xss.scanner import XSSScanner
from modules.vulnerability_scanning.lfi_rce import LFITester, RCETester # Ensure these are imported
from core.integrations.sqlmap_wrapper import SqlmapWrapper # <--- IMPORT SQLMAP WRAPPER

class VulnScanner:
    def __init__(self, target):
        self.target = target
        self.logger = CyberLogger()
        self.xss_scanner = XSSScanner(self.target)
        self.lfi_tester = LFITester(self.target)
        self.rce_tester = RCETester(self.target)
        self.sqlmap_wrapper = SqlmapWrapper() # <--- INITIALIZE SQLMAP WRAPPER

    def check_xss(self):
        self.logger.info("Starting XSS scan...")
        results = self.xss_scanner.scan()
        if results:
            self.logger.warning(f"XSS findings: {results}")
        else:
            self.logger.info("No XSS findings.")
        return results

    def check_lfi(self):
        self.logger.info("Starting LFI scan...")
        lfi_results = self.lfi_tester.test()
        if lfi_results:
            self.logger.warning(f"LFI findings: {lfi_results}")
        else:
            self.logger.info("No LFI findings.")
        return lfi_results

    def check_rce(self):
        self.logger.info("Starting RCE scan...")
        rce_results = self.rce_tester.test()
        if rce_results:
            self.logger.warning(f"RCE findings: {rce_results}")
        else:
            self.logger.info("No RCE findings.")
        return rce_results

    def run_sqlmap(self):
        self.logger.info("Starting SQLi scan (using sqlmap)...")
        # You can pass additional sqlmap options here if needed, e.g., ['--dbs', '--batch']
        sqli_results = self.sqlmap_wrapper.scan(self.target)
        if sqli_results:
            self.logger.warning(f"SQLi findings (from sqlmap): {sqli_results}")
        else:
            self.logger.info("No SQLi findings from sqlmap.")
        return sqli_results

    def run_full_scan(self):
        self.logger.info(f"Starting Full Scan for {self.target}")
        all_results = {}
        all_results['xss'] = self.check_xss()
        all_results['lfi'] = self.check_lfi()
        all_results['rce'] = self.check_rce()
        all_results['sqli'] = self.run_sqlmap() # Include SQLi in full scan
        # Add other scan types here as they are developed
        
        # Example of how findings might be consolidated for a single report
        total_findings = 0
        for scan_type, findings in all_results.items():
            if findings:
                total_findings += len(findings)
                self.logger.info(f"Summary for {scan_type}: {len(findings)} findings.")
            else:
                self.logger.info(f"Summary for {scan_type}: No findings.")
        
        self.logger.info(f"Full scan completed. Total vulnerabilities found: {total_findings}.")
        
        return all_results # Return the consolidated results for reporting